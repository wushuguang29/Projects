<template>
	<view class="main">
		<view class="header">
			<view class="uni_voice">
				<view style="display: flex; margin: 7% 0 0 0;font-size: 18px;padding: 0% 0% 0% 5%;">
					<view style="color:#999999; ">评测人</view>
					<view style="margin-left: 4%;font-size: 40rpx;width: 50%;">{{questionItem.name}}</view>
					<view v-if="!aishow">
						<view @tap="playVideo()">{{!flag?'播放':'暂停'}}<u-icon :name="!flag?'volume-up':'pause'" color="#47C3A8" size="40"></u-icon>
						</view>
					</view>
					<view v-if="aishow" style=" text-align: center;margin: -4% 0 0 7%;">
						<view @click="goto('/pages/views/advisory/index')" style="font-size: 36rpx;"><view><u-icon name="chat" color="#47C3A8" size="50"></u-icon></view><view>咨询</view>
						</view>
					</view>
				</view>
				<view class="instruction" v-if="!aishow"> {{questionItem.instruction}}</view>
			</view>
		</view>
		<view class="content">
			<view class="uni_question">
				<view>计时:{{totalTime}}</view>
				<view class="uni_Qucontent" v-if="!aishow">
					<h1>{{questionIndex+1}}、{{questionItem.question_title}}</h1>
					<view style="height: 50%;">
						<u-radio-group wrap="true" v-if="questionItem.question_type=='单选'" v-model="checked">
							<u-radio 
								v-for="(item, index) in questionItem.children" :key="index" 
								:name="item.index"
								style="font-size: 35rpx;font-weight: 800;">{{item.index}}、{{item.option_title}}</u-radio>
						</u-radio-group>
						<u-checkbox-group v-else wrap="true" @change="checkboxGroupChange">
							<u-checkbox  v-for="(item, index) in questionItem.children" :key="index" v-model="item.checked"
							 :name="item.index" style="font-size: 35rpx;font-weight: 800;">{{item.index}}、{{item.option_title}}</u-checkbox>
						</u-checkbox-group>
					</view>

					<view class="bottom">
						<view style="color:#000000;font-size: 32rpx;text-align: center;">第{{questionIndex+1}}题 <span style="color:#999999; margin-left: 4%;">共
								{{questionArray.length}}题</span></view>
						<view style="display: flex;">
							<button class="uni-btn" @click="previousQuestion" v-if="questionIndex!=0">上一题</button>
							<button class="uni-btn" @click="nextQuestion">{{questionArray.length == questionIndex +1?'提交答题':'下一题'}}</button>
						</view>
					</view>
				</view>
				<u-popup v-model="show" mode="center" border-radius="10" width="450rpx" height="400rpx">
					<view style="width: 100%; padding: 16% 0 0 0; text-align: center;overflow: auto;">确定提交此次评测？</view>
					<view style="display: flex;width: 100%;">

						<u-button type="success" size="default" class="custom-style" @click="Backtoanswer">返回继续</u-button>
						<u-button type="success" size="default" class="custom-style" @click="Endanswer">结束答题</u-button>
					</view>
				</u-popup>
				<view class="uni_Qucontent" v-if="aishow">
					<view style="height: 50%;">
						<view>
							<view style="text-align: center; padding: 26% 0 0 0;">
								<p>您此次得分{{log.evaluating_score}}</p>
								<p>{{log.evaluating_result}}</p>
							</view>
						</view>

					</view>
					<view class="bottom">
						<view style="display:flex;text-align:center;margin: 34% auto;">
							<button class="uni-btns" @tap="revert">确定</button>
						</view>
					</view>
				</view>
			</view>
		</view>

	</view>
</template>

<script>
	// import unibadge from '../../../computed/index.vue'


	export default {
		data() {
			return {
				questionArray: [], //所有数据对象
				questionIndex:0,//当前渲染的下标
				questionVideoIndex:0,
				questionData:[],//选中的答题答案
				checked:null,//当前题目答题的答案
				show: false,
				timer: null,
				totalTime: 0, //计时秒
				log: {}, //答题完显示返回数据
				aishow: false,
				flag: false,
				music:null,
				current: {
					poster: 'https://vkceyugu.cdn.bspapp.com/VKCEYUGU-uni-app-doc/7fbf26a0-4f4a-11eb-b680-7980c8a877b8.png',
					name: '语音播放',
					author: '',
					src: '../../../static/obj_wo3DlMOGwrbDjj7DisKw_4259241408_f04a_60d8_0a5e_ee8366475cc11dbe82d466f8f9c36f0b.mp3',
				},
				audioAction: {
					method: 'pause'
				}
			}
		},
		computed:{
			questionItem(){
				return this.questionArray[this.questionIndex]
			}
		},
		// 关闭页面时，关闭定时间，重置定时时间
		onUnload: function() {
			if (this.timer) {
				clearInterval(this.timer);
				this.totalTime = 0;
				this.music.destroy();
			}
		},
		onLoad: function(option) { //option为object类型，会序列化上个页面传递的参数
			this.option = option;
			this.$ajax.get({
				url: '/api/Evaluating/getQuestionsList',
				param: {
					domain: this.option.domain,
					side: this.option.side,
					app_user_member_id: this.option.type
				},
				header: {
					'Content-Type': 'application/json;charset=UTF-8',
					'x-requested-with': "XMLHttpRequest"
				},
			}).then((res) => {
				this.questionArray = [...res.data.data.result];
				this.questionIndex = 0;
			})
		},
		mounted() {
			this.music = uni.createInnerAudioContext();
			this.timer = setInterval(() => {
				this.totalTime++; 
			}, 1000)
		},
		watch:{
			flag:function(val){
				if(val){
					this.questionVideoIndex = this.questionIndex;
					this.music.src = this.questionItem.voice; //选择播放的音频
					this.music.play(); //执行播放
				}else{
					if(this.questionVideoIndex == this.questionIndex){
						this.music.pause();
					}else{
						this.music.stop();
					}
				}
			}
		},
		methods: {
			goto(url) {
			   uni.redirectTo({
				   url:url
			   })
		    },
			checkboxGroupChange(e){
				console.log(e)
				this.checked = e;
			},
			//返回继续答题
			Backtoanswer() {
				this.show = false;
			},
			//结束答题
			Endanswer() {
				this.$ajax.post({
					url: '/api/Evaluating/evaluate',
					data: {
						answer: JSON.stringify(this.questionData),
						evaluating_how_long: this.totalTime
					},
					header: {
						'Content-Type': 'application/json;charset=UTF-8',
						'x-requested-with': "XMLHttpRequest"
					},
				}).then((res) => {
					console.log("res", res)
					this.log = res.data.data;
					this.aishow = true;

				})
				this.show = false;
				clearInterval(this.timer);
			},
			playVideo(e) {
				this.flag = !this.flag;
			},
			revert(e) {
				uni.switchTab({
					url: '/pages/views/EvaluationCenter/CenterIndex'
				})
			},
			previousQuestion() {
				this.flag = false;
				this.questionIndex--;
	            this.checked = this.questionData[this.questionIndex].answer;
			},
			nextQuestion() {
				if(!this.checked) return uni.showToast({
						title: "选项不能为空",
						icon: "none"
					});
				this.flag = false;
				if(this.questionData[this.questionIndex+1]){
					this.checked = this.questionData[this.questionIndex+1].answer;
				}else{
					this.questionData.push({
						id:this.questionItem.id,
						answer:this.checked instanceof Array?JSON.stringify(this.checked) :this.checked
					});
					this.checked = null;
				}
				if(this.questionIndex+1 == this.questionArray.length){
					this.show = true;
					return;
				}
				console.log(this.questionData);
				this.questionIndex++;
			},
		},
	}
</script>

<style>
	.instruction {
		color: #999999;
		font-size: 32rpx;
		    width: 95%;
		    padding: 0 0 0 5%;
		/* white-space: nowrap;overflow: hidden;text-overflow: ellipsis; */
	}

	.custom-style {
		width: 40%;
		padding-left: 6%;
		padding-top: 11%;
	}

	.uni_Qucontent {
		line-height: 80rpx;
		height: 100%;
	}

	.uni_question {
		padding-top: 5%;
		font-size: 45rpx;
		height: 100%;
		min-height: 25rem;
	}

	audio {
		width: 12rem;
	}

	.bottom {}

	.u-checkbox {
		float: inherit !important;
	}

	.uni-btn {
		margin: 59rpx 40rpx 0;
		background: #47C3A8;
		color: #fff;
		width: 40%;
	}

	.uni-btns {
		background: #47C3A8;
		color: #fff;
		width: 40%;
	}

	.footer {
		background-color: #F8F8FF;
		color: #fff;
		line-height: 100rpx;
		flex: 0 0 100rpx;
		/* 不放大不缩小固定100rpx */
	}

	.main {
		display: block;
	/* 	min-height: 49rem; */
		background-color: #F8F8FF;
	}

	.header {
		overflow: hidden;
		height: 25%;
	}

	.uni_question {
		border: 11rpx solid #FFFFFF;
		height: 95%;
		border-radius: 51rpx;
		background-color: #ffffff;
		margin: 0% auto;

		width: 90%
	}

	.uni_voice {
		border: 11rpx solid #FFFFFF;
		height: 80%;
		border-radius: 51rpx;
		background-color: #ffffff;
		margin: 5% auto;
		margin-bottom: 5%;
		width: 90%
	}

	.content {
		min-height: 30rem;
		height: 75%;
	}
</style>
