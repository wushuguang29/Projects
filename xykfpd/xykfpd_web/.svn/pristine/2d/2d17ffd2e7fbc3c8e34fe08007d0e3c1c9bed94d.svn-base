<!--康复评测--题库结果-->
<template>
  <el-container class="main-container">
    <el-header class="search-container" height="auto">
      <lh-search-bar
        :formItemData="formItemData"
        @searchChange="getGridData"
        @addHandler="addHandler"
      />
    </el-header>
    <lh-table
      :table="table"
      :gridData="gridData"
      @pageChange="getGridData"
      :needPaging="true"
      :loading="loading"
      @handleEdit="handleEdit"
      @handleUpload="handleUpload"
      @handleLook="handleLook"
      :total="total"
    ></lh-table>

    <lh-dialog
      :dialogVisible.sync="dialogVisible"
      v-if="createDialog"
      :windowTitle="windowTitle"
      :hasButton="false"
      @updateList="updateList"
    >
      <!-- <edit v-if="loShow" :editStatus="editStatus" :rowData="rowData" @handleClose="cancel" @updateList="updateList"></edit> -->
      <add
        v-if="!loShow"
        :editStatus="editStatus"
        :isLook="isLook"
        :rowData="rowData"
        @handleClose="cancel"
        @updateList="updateList"
      ></add>
    </lh-dialog>
  </el-container>
</template>
<script>
// import {
//  getFinanceList
// } from "@/api/finance.js";
import { getList, browse, edit } from "@/api/evaluation";
// import { getProjectAll } from "@/api/public.js";
import { mapActions, mapGetters } from "vuex";

import add from "./detail/add";
import { getBaseConfig } from "@/utils/common";
// import Audit from "./module/Audit";

export default {
  name: "index",
  components: {
    add,
  },
  data() {
    return {
      editStatus: false,
      loShow: false,
      windowTitle: "",

      areaList: [],

      formItemData: [
        {
          element: "input",
          defaultValue: "",
          name: "search",
          disabled: false,
          label: "关键字",
          placeholder: "请输入方面关键字",
        },
        {
          element: "select",
          defaultValue: "",
          name: "domain",
          label: "领域",
          placeholder: "请选择领域",
          clearable: true,
          options: [],
        },
      ],
      table: {
        // hasSelect: false,
        hasRowsNumber: true,

        hasOperation: true,
        hasExpend: true,
        columns: [
          {
            text: "领域",
            dataIndex: "domain",
            showToolTip: true,
            render: (h, params) => {
              let value = params.row["domain"],
                config = getBaseConfig("DOMAIN");

              return h("span", config[value]);
            },
          },
          {
            text: "方面",
            dataIndex: "side",
            showToolTip: true,
          },
          {
            text: "得分范围/结果提示",
            dataIndex: "score_range",
            showToolTip: true,
            render: (h, params) => {
              let value = params.row["score_range"],
                text = "",
                log = "";
              //   if(value!=null){
              //      value=JSON.parse(value);
              //   console.log("value",value)
              //   value.forEach(element => {
              //    text='范围值:'+element.begin+'~'+element.end+'|提示:'+element.result+'|';
              //    console.log("text",text)
              //    log=''+text
              //   });
              //   }
              //  console.log("log",log)
              //   return h("span", log);
              // console.log(value.split("<br />"));
              console.log("加载之" + value);
              //因为异步原因，数据还没有加载完成 ，调用split 会报错
              if(value==""||value==null||value==undefined){
                   return <i class="el-icon-chat-square"></i>
              }else{
                if (value) {
                let arr = value.split("<br />");
                return arr.map((item) => {
                  return <div style="text-align: left"> {item} </div>;
                });
              } else {
                console.log("bb");
              }
              }
              
            },
          },
        ],
        operation: {
          width: 340,
          data: [
            {
              text: "查看",
              Fun: "handleLook",
              permission: "look",
              type: "primary",
            },
            {
              text: "编辑",
              Fun: "handleEdit",
              permission: "edit",
              type: "primary",
            },
          ],
        },
      },

      //element-ui的dialog控制显示隐藏属性
      dialogVisible: false,
      //标记编辑或者新增状态
      editStatus: false,
      //窗口带入回写的数据
      rowData: { house_district: {} },
      roleList: [],
    };
  },
  computed: {
    ...mapGetters({
      gridData: "evaluation/list/gridData",
      total: "evaluation/list/total",
      loading: "evaluation/list/loading",
    }),

    createDialog: function () {
      return this.dialogVisible;
    },
  },
  methods: {
    ...mapActions({
      getGridData: "evaluation/list/getGridData",
      deleteGrid: "evaluation/list/deleteGrid",
      createTagPanel: "createTagPanel",
    }),
    async project() {
      //   const { data } = await getProjectAll();
      //   const newData = this.dataArrSelect(data);
      //   this.formItemData[0].options = newData;
      //   let policyConfig = getBaseConfig("APPLY_STATUS", true);
    },
    addHandler: function () {
      this.dialogVisible = true;
      this.editStatus = false;
      this.loShow = false;
      this.isLook = false;
      //   this.rowAdd = false;
      this.windowTitle = "新增";
      this.rowData = {};
    },
    handleUpload(options) {
      // this.isUpload = true;
      // this.target_id = options.row.id;
      // this.project_id = options.project_id ? options.project_id : 0;
    },
    handleLook(options) {
      //   console.log(3333);
      this.isLook = true;
      const { row, index } = options;
      this.editStatus = true;
      this.windowTitle = "查看";
      this.dialogVisible = true;

      this.rowData = {};
      Object.assign(this.rowData, row);
    },

    handleEdit: function (options) {
      this.loShow = false;
      console.log(3333);
      this.isLook = false;
      const { row, index } = options;
      this.editStatus = true;
      this.windowTitle = "编辑";
      this.dialogVisible = true;
      this.isSee = false;
      this.rowData = {};
      Object.assign(this.rowData, row);
    },
    //编辑或新增成功后刷新列表
    updateList() {
      console.log("list",getList)
      this.getGridData({ list: getList }); //接口
    },
    cancel() {
      this.dialogVisible = false;
      // this.updateList()
    },
    //下拉转换
    dataArrSelect(arr) {
      //   arr.forEach((item) => {
      //     item.name = item.project_name;
      //   });
      //   return arr;
    },
    policyGet() {
      //   let policyConfig = getBaseConfig("APPLY_STATUS", true);
      //   this.formItemData[0].options = policyConfig;
    },
  },
  //表格数据
  created() {
    //列表
    this.getGridData({
      list: getList,
    });
    this.formItemData[1].options = getBaseConfig("DOMAIN", true);
  },
  mounted() {
    this.project();
  },
};
</script>
<style lang="less" scoped>
.el-dialog {
  width: 30% !important;
}
</style>