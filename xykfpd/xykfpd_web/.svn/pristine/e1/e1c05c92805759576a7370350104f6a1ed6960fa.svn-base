import axios from "axios";
import store from "../store/index.js";
import { Message, MessageBox } from "element-ui";

// 创建axios实例
let baseURL = "";
if (process.env.NODE_ENV == "development") {
  baseURL = "/api";
} else if (process.env.NODE_ENV == "production") {
  baseURL = process.env.VUE_APP_BASE_API;
}
let service = axios.create({
  baseURL: baseURL, // api的base_url
  timeout: 5000, // 请求超时时间
});
// request拦截器
service.interceptors.request.use(
  (config) => {
    // console.log(config.headers.Authorization,store.getters.token)
    if (store.getters.token) {
      // 设置公共请求头
      config.headers.Authorization = "Bearer " + store.getters.token;
    }
    return config;
  },
  (error) => {
    Promise.reject(error);
  }
);

// respone拦截器
service.interceptors.response.use(
  (response) => {
    /**
     * code:200,接口正常返回;
     */
    //刷新token
    if (response.headers.authorization) {
      store.commit(
        "setToken",
        response.headers.authorization.replace("Bearer ", "")
      );
    }
    const res = response.data;
    if (res.code != 0) {
      Message({
        message: res.msg,
        type: "error",
        duration: 3 * 1000,
      });
      // 根据服务端约定的状态码(“40002”, “不合法的Token”，“40003”, “Token 已失效”);
      if (res.code === 40002 || res.code === 40003 || res.code === 40006) {
        store.commit("setToken", null);
        store.commit("setUserInfo", null);
        store.commit("isLogin", false);
        location.reload();
      } else if (res.code == 40005) {
        // 配置数据已过期重新获取配置数据
        MessageBox.confirm("基础配置发生改变，是否更新", {
          confirmButtonText: "更新",
          cancelButtonText: "不更新",
          type: "info",
        }).then(() => {
          store.dispatch("refreshBaseConfig").then(() => {
            console.log("更新配置");
          });
        });
      }
      return Promise.reject(res);
    } else {
      // res.code === 0,正常返回数据
      console.log("axios:", res);
      return response.data;
    }
  },
  (error) => {
    Message({
      message: "请求失败",
      type: "error",
      duration: 3 * 1000,
    });
    return Promise.reject(error);
  }
);
// export default service;
export function get(url, params) {
  console.log(url);
  return new Promise((resolve, reject) => {
    service
      .get(url, {
        params: params,
      })
      .then((res) => {
        resolve(res);
      })
      .catch((err) => {
        reject(err);
      });
  });
}

export function post(url, params) {
  // console.log(url,params)
  return new Promise((resolve, reject) => {
    service
      .post(url, params)
      .then((res) => {
        resolve(res);
      })
      .catch((err) => {
        reject(err);
      });
  });
}
